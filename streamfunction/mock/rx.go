// Code generated by MockGen. DO NOT EDIT.
// Source: rx.go

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rx "github.com/yomorun/yomo/core/rx"
)

// MockStreamfnRx is a mock of StreamfnRx interface.
type MockStreamfnRx struct {
	ctrl     *gomock.Controller
	recorder *MockStreamfnRxMockRecorder
}

// MockStreamfnRxMockRecorder is the mock recorder for MockStreamfnRx.
type MockStreamfnRxMockRecorder struct {
	mock *MockStreamfnRx
}

// NewMockStreamfnRx creates a new mock instance.
func NewMockStreamfnRx(ctrl *gomock.Controller) *MockStreamfnRx {
	mock := &MockStreamfnRx{ctrl: ctrl}
	mock.recorder = &MockStreamfnRxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamfnRx) EXPECT() *MockStreamfnRxMockRecorder {
	return m.recorder
}

// AppendNewDataToRawStream mocks base method.
func (m *MockStreamfnRx) AppendNewDataToRawStream(rawStream, fnStream rx.Stream) rx.Stream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendNewDataToRawStream", rawStream, fnStream)
	ret0, _ := ret[0].(rx.Stream)
	return ret0
}

// AppendNewDataToRawStream indicates an expected call of AppendNewDataToRawStream.
func (mr *MockStreamfnRxMockRecorder) AppendNewDataToRawStream(rawStream, fnStream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendNewDataToRawStream", reflect.TypeOf((*MockStreamfnRx)(nil).AppendNewDataToRawStream), rawStream, fnStream)
}

// GetAppendedStream mocks base method.
func (m *MockStreamfnRx) GetAppendedStream(readers chan io.Reader, handler func(rx.Stream) rx.Stream) rx.Stream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppendedStream", readers, handler)
	ret0, _ := ret[0].(rx.Stream)
	return ret0
}

// GetAppendedStream indicates an expected call of GetAppendedStream.
func (mr *MockStreamfnRxMockRecorder) GetAppendedStream(readers, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppendedStream", reflect.TypeOf((*MockStreamfnRx)(nil).GetAppendedStream), readers, handler)
}
