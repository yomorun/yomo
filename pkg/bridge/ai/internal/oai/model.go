package oai

import (
	"github.com/yomorun/yomo/ai"
	"github.com/yomorun/yomo/core/metadata"
)

// OpenAIRequester is the interface for OpenAI API client
type OpenAIRequester interface {
	// ChatCompletion is the method to get chat completions
	ChatCompletion(apiEndpoint string, authHeaderKey string, authHeaderValue string, baseRequestbody ReqBody, baseSystemMessage string, userInstruction string, chainMessage ai.ChainMessage, md metadata.M, ifWithTool bool) (*ai.InvokeResponse, error)
}

// ChatCompletionMessage describes `messages` for /chat/completions
type ChatCompletionMessage struct {
	// Role is the messages author
	Role string `json:"role"`
	// Content of the message
	Content string `json:"content"`
	// Name describes participant, provides the model information to differentiate
	// between participants of the same role.
	Name string `json:"name,omitempty"`
	// ToolCalls describes the tool calls generated by the model.
	ToolCalls []*ai.ToolCall `json:"tool_calls,omitempty"`
	// ToolCallID is the ID of the tool call
	ToolCallID string `json:"tool_call_id,omitempty"`
}

// ReqBody is the request body
type ReqBody struct {
	// Model describes the ID of the model to use for the completion.
	Model string `json:"model"`
	// Messages describes the messages in the conversation.
	Messages []ChatCompletionMessage `json:"messages"`
	// Tools describes the tool calls generated by the model.
	Tools []ai.ToolCall `json:"tools"` // chatCompletionTool
}

// RespBody is the response body
type RespBody struct {
	// ID is the unique identifier for the chat completion.
	ID string `json:"id"`
	// Object describes the object type, it is always "chat.completion".
	Object string `json:"object"`
	// Created describes the timestamp when the chat completion was created.
	Created int `json:"created"`
	// Model describes the model used for the chat completion.
	Model string `json:"model"`
	// Choices describes the choices made by the model, can more than one if `n`>1
	Choices []RespChoice `json:"choices"`
	// Usage describes the token usage statistics for the chat completion request.
	Usage RespUsage `json:"usage"`
	// SystemFingerprint describes the system fingerprint of the chat completion.
	SystemFingerprint string `json:"system_fingerprint"`
}

// RespMessage is the message in Response
type RespMessage struct {
	Role      string        `json:"role"`
	Content   string        `json:"content"`
	ToolCalls []ai.ToolCall `json:"tool_calls"`
}

// RespChoice is used to indicate the choice in Response by `FinishReason`
type RespChoice struct {
	FinishReason string                `json:"finish_reason"`
	Index        int                   `json:"index"`
	Message      ChatCompletionMessage `json:"message"`
}

// RespUsage is the token usage in Response
type RespUsage struct {
	PromptTokens     int `json:"prompt_tokens"`
	CompletionTokens int `json:"completion_tokens"`
	TotalTokens      int `json:"total_tokens"`
}
