
// Serverless main function
func main() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

var (
	name       string
	credential string
	zipper     string
	rootCmd    = &cobra.Command{
		Short: "Start a YoMo Stream Function",
		Long:  "Start a YoMo Stream Function",
		Run: func(cmd *cobra.Command, args []string) {
			run(cmd, args)
		},
	}
)

func run(_ *cobra.Command, _ []string) {
	name := viper.GetString("name")
	credential := viper.GetString("credential")
	addr := viper.GetString("zipper")
	// create a new stream function
	sfn := yomo.NewStreamFunction(
		name,
		addr,
		yomo.WithSfnCredential(credential),
		{{if and .WithDescription .WithInputSchema}}yomo.WithSfnAIFunctionDefinition(Description(), InputSchema()),{{end}}
	)
	{{if .WithInitFunc}}
	// init
	sfn.Init(Init)
	{{end}}
	// set observe data tags
	sfn.SetObserveDataTags(DataTags()...)
	{{if .WithWantedTarget}}
	// set wanted target
	sfn.SetWantedTarget(WantedTarget())
	{{end}}
	// create a Rx runtime.
	rt := rx.NewRuntime(sfn)
	// set handler
	sfn.SetHandler(rt.RawByteHandler)
	// set error handler
	sfn.SetErrorHandler(func(err error) {
		log.Printf("[sfn][%s] error handler: %T %v\n", addr, err, err)
	})
	// connect to zipper
	err := sfn.Connect()
	if err != nil {
		log.Printf("[sfn] connect to zipper[%s], %v\n", addr, err)
		os.Exit(1)
	}
	defer sfn.Close()
	// pipe rx stream and rx handler.
	rt.Pipe(Handler)

	sfn.Wait()
}

func init() {
	rootCmd.Flags().StringVarP(&zipper, "zipper", "z", "localhost:9000", "YoMo-Zipper endpoint addr")
	rootCmd.Flags().StringVarP(&name, "name", "n", "app", "yomo stream function name")
	rootCmd.Flags().StringVarP(&credential, "credential", "d", "", "client credential payload, eg: `token:dBbBiRE7`")
	viper.SetEnvPrefix("YOMO_SFN")
	viper.SetEnvKeyReplacer(strings.NewReplacer("-", "_"))
	viper.BindPFlags(rootCmd.Flags())
	viper.AutomaticEnv()
}
