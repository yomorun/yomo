import { join } from 'path'
import {
	_genTools,
	_readSFNData,
	_writeSFNData,
	_writeSFNHeader,
	_FunctionCall,
	_createConnection,
} from '@yomo/sfn'
import { description, handler } from '{{ .FileName }}'

const WORK_DIR = '{{ .WorkDir }}'
const FUNCTION_NAME = '{{ .FunctionName }}'
const SFN_FILE_PATH = '{{ .FilePath }}'
const SOCK_PATH = join(WORK_DIR, 'sfn.sock');
const REDUCE_TAG = 0xe001;

function run() {
	if (!description || !handler) {
		throw Error('description, handler signature must be exported!')
	}
	const tools = _genTools(FUNCTION_NAME, description, SFN_FILE_PATH)
	const header = JSON.stringify({
		function_definition: JSON.stringify(tools, null, 2)
	})
	const { conn } = _createConnection(SOCK_PATH, {
		onConnect: () => {
			_writeSFNHeader(conn, header)
		},
		onData: async (buf: Buffer) => {
			const { data } = _readSFNData(buf)
			const fc = new _FunctionCall(data)
			const args = fc.readLLMArguments()
			let result: unknown
			if (typeof handler === 'function') {
				result = await handler(args)
			}
			if (!result) return
			fc.writeLLMResult(JSON.stringify(result))
			_writeSFNData(conn, REDUCE_TAG, JSON.stringify(fc.data))
		}
	})
}

run()